@page "/folders"
@using CTFChallenge.Shared
@using CTFChallenge.Client.Components
@using System.Net.Http.Headers
@inject HttpClient Http

<PageTitle>Folders</PageTitle>

<h1>Directory structure</h1>

<p>Here you can upload and download files to the server</p>
<p>Can you find the dll that blocks the flag?</p>
<p>Currently showing: <b>@(Directory?.Path ?? CurrentPath)</b></p>

@if (Directory is null)
{
    <p><em>Filling directory...</em></p>
}
else
{
    <CascadingValue Value="@CurrentPath">
        <ol prefix="">
            <DirectoryTree Directory="@Directory" DirectoryChanged="OnDirectoryChanged" />
        </ol>
    </CascadingValue>
    <p>
        <label>
            Upload a file to this directory
            <InputFile OnChange="@LoadFiles" />
            <button @onclick="Upload"> Upload!</button>
        </label>
    </p>
}

@code {
    [Parameter]
    public string CurrentPath { get; set; } = ".";
    private Directory? Directory;

    private IBrowserFile? FileToUpload { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await OnDirectoryChanged(CurrentPath);
    }

    private async Task OnDirectoryChanged(string path)
    {
        Directory = await Http.GetFromJsonAsync<Directory>($"Directory?path={path}");
        StateHasChanged();
    }

    private void LoadFiles(InputFileChangeEventArgs e)
    {
        FileToUpload = e.File;
    }

    private async Task Upload(MouseEventArgs e)
    {
        if (FileToUpload is null) return;

        using var multipart = new MultipartFormDataContent();

        var filePart = new StreamContent(FileToUpload.OpenReadStream(long.MaxValue));
        filePart.Headers.ContentType = new MediaTypeHeaderValue(string.IsNullOrEmpty(FileToUpload.ContentType) ? "text/plain" : FileToUpload.ContentType);

        multipart.Add(filePart, "file", FileToUpload.Name);

        await Http.PostAsync($"File?Path={Directory?.Path ?? CurrentPath}", multipart);

        // Rerender the directory after the successful upload.
        await OnDirectoryChanged(Directory?.Path ?? CurrentPath);
    }
}
